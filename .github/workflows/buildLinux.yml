name: Build Linux

on:
  push:
    branches: 'master'

jobs:
  build:
    runs-on: ubuntu-20.04
    strategy:
      matrix:
        buildType: [Debug, Release]

    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup Environment
        run: |
          sudo apt-get update && sudo apt-get install -y libxaw7-dev libxrandr-dev libxcb-randr0-dev libx11-dev xserver-xorg-dev xorg-dev libx11-xcb1 libxcb-res0-dev xcb libxcb-xkb-dev x11-xkb-utils libx11-xcb-dev libxkbcommon-x11-dev libgtk-3-dev patchelf
      - name: Download artifact
        uses: dawidd6/action-download-artifact@v3
        with:
          name: avBuiltLinux-${{ matrix.buildType }}.tar.gz
          repo: OtherMythos/avBuild
          workflow: linux.yml
      - name: Download linuxdeploy
        run: |
          wget -O /usr/local/bin/linuxdeploy https://github.com/linuxdeploy/linuxdeploy/releases/download/continuous/linuxdeploy-x86_64.AppImage
          chmod +x /usr/local/bin/linuxdeploy
      - name: Expand artifact
        run: |
          tar -xvf build.tar.gz
      - name: Delink artifacts
        run: |
          cd ${{ matrix.buildType }}/ogre2/lib/OGRE
          if [ "${{ matrix.buildType }}" == "Debug" ]; then
            patchelf --remove-needed $(patchelf --print-needed RenderSystem_GL3Plus_d.so | grep Ogre) RenderSystem_GL3Plus_d.so
            patchelf --remove-needed $(patchelf --print-needed Plugin_ParticleFX_d.so | grep Ogre) Plugin_ParticleFX_d.so
          else
            patchelf --remove-needed $(patchelf --print-needed RenderSystem_GL3Plus.so | grep Ogre) RenderSystem_GL3Plus.so
            patchelf --remove-needed $(patchelf --print-needed Plugin_ParticleFX.so | grep Ogre) Plugin_ParticleFX.so
          fi
      - name: Setup CMake
        run: |
          mkdir build
          cd build
          cmake -DAV_LIBS_DIR="${{ github.workspace }}/${{ matrix.buildType }}" -DCMAKE_BUILD_TYPE=${{ matrix.buildType }} ..
      - name: Build
        run: |
          cd build
          cmake --build .
          ls
      - name: Package AppImage
        run: |
          cd build
          mkdir -p /tmp/outAppDir/usr/bin
          cp -r Hlms essential /tmp/outAppDir/usr/bin
          linuxdeploy --appimage-extract-and-run --appdir /tmp/outAppDir/ -e av -e RenderSystem_GL3Plus.so -e Plugin_ParticleFX.so -i ../setup/logo.svg -d ../setup/entry.desktop --output appimage
      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: av-x86_64-${{ matrix.buildType }}.AppImage
          path: "${{ github.workspace }}/build/av-x86_64.AppImage"
